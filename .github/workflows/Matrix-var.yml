name: Running matrix

on: push

jobs:
  # setup:
  #   runs-on: ubuntu-latest
  #   environment: staging
  #   outputs:
  #     matrix: ${{ steps.matrix.outputs.value }}
  #   steps:
  #     - id: matrix
  #       run: |
  #         echo 'Matrix env var is: ${{vars.MATRIX_VAR}} '
  #         echo '::set-output name=value::[${{vars.MATRIX_VAR}}]'
  # build:
  #   needs: [ setup ]
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix: ${{fromJSON(needs.setup.outputs.matrix)}}
  #   steps:
  #     - run: |
  #         echo "Value is: ${{toJSON(matrix.value.name) }}"

  step1:
    runs-on: ubuntu-latest
    environment: staging
    outputs:
      matrix: ${{ steps.matrix_setup.outputs.value }}    
    steps:
    - name: Setup
      id: matrix_setup
      run: echo "::set-output name=value::${{vars.CONFIG_VAR}}"
  #echo "value=$(jq -r -c . <<< '${{vars.CONFIG_VAR}}')" >> $GITHUB_OUTPUT

    # - name: Check
    #   run: jq . <<< '${{ steps.setup.outputs.matrix }}'

  step2:
    needs: [step1]
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        include: ${{ fromJSON(needs.step1.outputs.matrix) }}
    steps:
    - run: |
        echo "Value of matrix is: ${{toJSON(matrix) }}"

    # steps:
    # - name: Check
    #   env:
    #     MATRIX: ${{ toJSON(matrix) }}
    #     PROJECT: ${{ fromJSON(toJSON(matrix)).project }}
    #     CONFIG: ${{ fromJSON(toJSON(matrix)).config }}
    #     NESTED: ${{ join(fromJSON(toJSON(matrix)).nested.*.val, ', ') }}
    #   run: |
    #     echo "MATRIX: $(jq -r -c '.' <<< '$MATRIX')"
    #     echo "PROJECT: [$PROJECT]"
    #     echo "CONFIG: [$CONFIG]"
    #     echo "NESTED: [$NESTED]"